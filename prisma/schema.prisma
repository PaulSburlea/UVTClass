datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Classroom {
  id         String    @id @default(uuid())
  userId     String
  teacher    Teacher   @relation(fields: [userId], references: [userId], onDelete: Cascade)

  name       String    @db.Text
  section    String?
  subject    String?
  room       String?
  code       String    @unique

  users      UserClassroom[]
  posts      Post[]

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([userId])
  @@map("classroom")
}

model Teacher {
  userId      String      @id
  createdAt   DateTime    @default(now())
  classrooms  Classroom[]

  @@map("teacher")
}

model UserClassroom {
  id           String   @id @default(uuid())
  classroomId  String
  userId       String
  role         UserRole

  classroom    Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)

  createdAt    DateTime  @default(now())

  @@unique([classroomId, userId])
  @@index([userId])
  @@index([classroomId])
  @@map("userclassroom")
}

enum UserRole {
  TEACHER
  STUDENT
}

model Post {
  id          String     @id @default(uuid())
  authorId    String
  authorName  String?
  classroomId String

  title       String
  content     String?    @db.Text

  classroom   Classroom  @relation(fields: [classroomId], references: [id], onDelete: Cascade)

  materials   Material[]
  comments    Comment[]

  createdAt   DateTime   @default(now())
  editedAt    DateTime?

  @@index([classroomId])
  @@map("post")
}

model Material {
  id         String      @id @default(uuid())
  name       String?
  postId     String?
  title      String
  type       MaterialType
  filePath   String?     @db.Text
  url        String?     @db.Text

  post       Post?       @relation(fields: [postId], references: [id], onDelete: Cascade)

  uploadedAt DateTime    @default(now())

  @@index([postId])
  @@map("material")
}

model Comment {
  id              String     @id @default(uuid())
  postId          String
  authorId        String
  authorName      String
  authorAvatar    String?
  content         String     @db.Text
  parentCommentId String?

  post            Post       @relation(fields: [postId], references: [id], onDelete: Cascade)

  parentComment   Comment?   @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: NoAction,  onUpdate: NoAction)
  replies         Comment[]  @relation("CommentReplies")

  createdAt       DateTime   @default(now())
  editedAt        DateTime?  @updatedAt

  @@index([postId])
  @@index([parentCommentId])
  @@map("comment")
}

model Admin {
  userId    String   @id
  createdAt DateTime @default(now())

  @@map("admin")
}

enum GradeCategory {
  HOMEWORK
  QUIZ
  PROJECT
  EXAM
  OTHER
}

model Grade {
  id        String       @id @default(uuid())
  courseId  String
  studentId String
  category  GradeCategory
  title     String
  date      DateTime
  score     Float
  weight    Float
  position  Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@index([courseId])
  @@index([studentId])
  @@map("grade")
}

enum MaterialType {
  FILE
  YOUTUBE
  DRIVE
  LINK
}
