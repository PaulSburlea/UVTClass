datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Classroom {
  id        String   @id @default(uuid())
  userId    String   // profesorul (creatorul) cursului
  name      String   @db.Text
  section   String?
  subject   String?
  room      String?
  code      String   @unique

  users     UserClassroom[]
  posts     Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserClassroom {
  id           String   @id @default(uuid())
  classroomId  String
  userId       String
  role         UserRole

  classroom    Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())

  @@unique([classroomId, userId])
}

enum UserRole {
  TEACHER
  STUDENT
}


model Post {
  id          String     @id @default(uuid())
  authorId    String     
  authorName  String?
  classroomId String
  title       String     
  content     String?     @db.Text

  classroom   Classroom  @relation(fields: [classroomId], references: [id], onDelete: Cascade)

  materials   Material[]
  comments    Comment[]  @relation(name: "PostComments")

  createdAt   DateTime   @default(now())
  editedAt    DateTime?  

  @@index([classroomId])
}

model Material {
  id        String        @id @default(uuid())
  name      String?
  postId    String?
  title     String
  type      MaterialType
  filePath  String?       @db.Text
  url       String?       @db.Text

  post      Post?         @relation(fields: [postId], references: [id], onDelete: Cascade)

  uploadedAt DateTime     @default(now())

  @@index([postId])
}

model Comment {
  id              String     @id @default(uuid())
  postId          String
  authorId        String
  authorName      String
  authorAvatar    String?
  content         String     @db.Text
  parentCommentId String?

  post            Post       @relation(name: "PostComments", fields: [postId], references: [id], onDelete: Cascade)

  parentComment   Comment?   @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies         Comment[]  @relation("CommentReplies")

  createdAt       DateTime   @default(now())
  editedAt        DateTime?  @updatedAt

  @@index([postId])
  @@index([parentCommentId])
}

enum MaterialType {
  FILE
  YOUTUBE
  DRIVE
  LINK
}
