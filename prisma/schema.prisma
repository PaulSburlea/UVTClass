generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Classroom {
  id        String          @id @default(uuid())
  name      String          @db.Text
  section   String?
  subject   String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  code      String          @unique
  userId    String
  room      String?
  teacher   Teacher         @relation(fields: [userId], references: [userId], onDelete: Cascade)
  users     UserClassroom[]
  posts     Post[]

  @@index([userId])
  @@map("classroom")
}

model Teacher {
  userId     String      @id
  createdAt  DateTime    @default(now())
  classrooms Classroom[]

  @@map("teacher")
}

model UserClassroom {
  id          String    @id @default(uuid())
  classroomId String
  userId      String
  createdAt   DateTime  @default(now())
  role        UserRole
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)

  @@unique([classroomId, userId])
  @@index([userId])
  @@index([classroomId])
  @@map("userclassroom")
}

model Post {
  id          String     @id @default(uuid())
  authorId    String
  classroomId String
  createdAt   DateTime   @default(now())
  authorName  String?
  editedAt    DateTime?
  content     String?    @db.Text
  title       String
  classroom   Classroom  @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  materials   Material[]
  comments    Comment[]

  @@index([classroomId])
  @@map("post")
}

model Material {
  id           String       @id @default(uuid())
  title        String
  filePath     String?      @db.Text
  uploadedAt   DateTime     @default(now())
  type         MaterialType
  url          String?      @db.Text
  postId       String?
  name         String?
  format       String?      @db.Text
  publicId     String?      @db.Text
  resourceType String?      @db.Text
  fileKey      String?      @db.Text
  post         Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@map("material")
}

model Comment {
  id              String    @id @default(uuid())
  postId          String
  authorId        String
  authorName      String
  content         String    @db.Text
  parentCommentId String?
  createdAt       DateTime  @default(now())
  authorAvatar    String?
  editedAt        DateTime? @updatedAt
  post            Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies         Comment[] @relation("CommentReplies")

  @@index([postId])
  @@index([parentCommentId])
  @@map("comment")
}

model Admin {
  createdAt DateTime @default(now())
  userId    String   @id

  @@map("admin")
}

model Grade {
  id        String        @id @default(uuid())
  courseId  String
  studentId String
  category  GradeCategory
  title     String
  date      DateTime
  score     Float
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  weight    Float
  position  Int

  @@index([courseId])
  @@index([studentId])
  @@map("grade")
}

enum UserRole {
  TEACHER
  STUDENT
}

enum GradeCategory {
  HOMEWORK
  QUIZ
  PROJECT
  EXAM
  OTHER
}

enum MaterialType {
  FILE
  YOUTUBE
  DRIVE
  LINK
}
